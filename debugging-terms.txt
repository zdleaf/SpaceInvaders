SERVER Connection.Java
CLIENT
FULL JSON
JSON SPLIT
getCommandArray()


MoveEntityCommand: {"entityId":176448112,"newX":596,"newY":647,"name":"spaceinvaders.command.client.MoveEntityCommand"}

Artificial Network delay
    - In ClientConfig.java, each player is assigned a random ping with ThreadLocalRandom from a given range
    - In client/network/UdpSender.java we Thread.sleep() by this ping value before sending each packet simulating network latency
    - This ping integer is sent to the server along with the other Player information (e.g. username etc) via the SetPlayerIdCommand as the server requires it for bucket synchronisation
    - The server stores the ping with the player in their instance of Player.java
    

Smooth Corrections
    - TEST SMOOTH CORRECTIONS
    - Connection.java - TEST_SMOOTH_CORRECTIONS = true
    - GameLoop.java - Set PLAYER_POS_UPDATE to 10000
    - GamePanel.java - Set DEADRECK_ENABLED to false

Dead Reckoning - default: DEADRECK_DELAY = 300, PLAYER_POS_UPDATE 200
- to test and see how ships automatically move in absence of server update
    - GameLoop.java - set PLAYER_POS_UPDATE in GameLoop to 5000
    - GamePanel.java - set DEADRECK_DEBUG to true

Bucket Synchro
    - Game.java - before we start the game, we compare every players ping, and set a delay for each Player. this is the difference between that players ping and the person with the highest ping. we can then delay execution of events for each player by this amount.
    - DO WE DELAY ALL QUEUE OF EVENTS OR JUST DELAY THE ONE WE NEED???
        - Execution of events is done in GameLoop.java, we loop through each player in the list and execute their commands
        - If we were to delay one players commands with a Thread.Sleep() here, all commands and players after this would be affected by the delay. For example, if the first player had a 50ms delay before each execution
        - In Player.java we have implemented Comparable to be able to sort our player list by ping delay (overriding the compareTo() function)
    - GameModel.java - BUCKET_DELAY = 
    - Sending bucket:
    - getCommandArray():
    - GameLoop.java - delay execution of move/shoot updates - does one delay delay entire chain?
    - Client side, there is an implementation of "buckets" similar to Nagles algorithm. The standard code sent an individual UDP packet for each command, rather than grouping multiple commands into one packet to save network traffic.
    - handleBucket() is a recursive function that takes an array of commands and splits it into JSON packets to be sent over the network. if the JSON output is larger than MAX_PACKET_SIZE, we recursively call the same function on the tail of the command list after sending the first bucket.
    - EXPLAIN SERVER SIDE CODE HOW WE HANDLE MULTIPLE JSON

Cheat and detection
    - CHEAT DETECTION
    - GameController - multiple shoot and cheatEnabled flag

Interest Management
    - Game.java
        - RefreshEntitiesCommand() is a command that updates/pushes every single entity from the game server to the client
        - after the initial push, this was meant to be called every 8 seconds, but due to a bug in the game counter logic, the condition to execute it never was met
        - this was fixed to send a RefreshEntitiesCommand() to each player every 2 seconds
        - see refreshEntities() command - the entities that get updated/pushed to the player depends on the X position of the player, i.e. if player is in left half of screen, only push entities that are in the left half and vice cersa. this is done with a call to getEntities() in World.java.
        
    - World.java
        - added getEntities(string flag) which will only add entities either on left or right based on the flag arguments passed ("left"/"right")
        - the only exception is PLAYER ships which we always want to display